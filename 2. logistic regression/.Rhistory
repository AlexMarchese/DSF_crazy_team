print('Hey guys')
rm(list = ls())
x = seq(-5, 5, by = 0.01)
y = 1/(1+exp(-x))
plot(x = x, y = y, type = "l", col = "turquoise")
grid()
library(tidyverse)
library(caret)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
D0 = read_csv("../Data/LoanDefaults.csv")
head(D0)
# What about NAs in the data?
table(is.na(D0$Months_since_last_delinquent))
map(D0, function(x) table(is.na(x)))
# Let's drop a column with many NAs, and then all
# rows with NAs.
Dt = D0 %>% select(-Months_since_last_delinquent) %>%
na.omit()
D = as_tibble(model.matrix(~ ., data = Dt)) %>%
select(-"(Intercept)")
# What are the new variables and their names?
names(D)
unique(D0$Term)
unique(D0$Home_Ownership)
unique(D0$Purpose)
View(D)
library(tidyverse)
library(caret)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
D0 = read_csv("../Data/LoanDefaults.csv")
rm(list = ls())
# What about NAs in the data?
table(is.na(D0$Months_since_last_delinquent))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
D0 = read_csv("../Data/LoanDefaults.csv")
head(D0)
View(D0)
library(tidyverse)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
DS <- read.delim("../Data/dataset.csv",sep = ";")
View(DS)
DS <- DS %>% select(c(5, 7, 9, 13))
DS <- read.delim("../Data/dataset.csv",sep = ";")
DS <- DS %>% select(c(5, 7, 9, 12))
DS[duplicated(DS[,-country])]
DS[duplicated(DS[,-1])]
DS[duplicated(DS[,c(2, 3, 4)])]
DS_dupl <- DS %>% select(-country)
View(DS_dupl)
DS[duplicated(DS_dupl)]
duplicated(DS_dupl)
DS[duplicated(DS_dupl),]
DS_uniq <- DS[unique(DS_dupl),]
DS[unique(DS_dupl),]
unique(DS_dupl)
unique(DS_dupl)
DS_unique <- unique(DS_dupl)
View(DS_unique)
colnames(DS)[1]
colnames(DS)[2]
colnames(DS)[2] = "category"
DS
DS_unique <- unique(DS)
DS_dupl <- DS %>% select(-country)
DS_unique <- unique(DS)
DS_dupl <- DS %>% select(-country)
DS_unique <- unique(DS_dupl)
DS[DS_unique$category == 1 & DS_unique$colour == 1 & DS_unique$price == 28,]
DS[DS_unique$category == 1 & DS_unique$colour == 1 & DS_unique$price == 28,]
DS[which(DS_unique$category == 1 & DS_unique$colour == 1 & DS_unique$price == 28),]
DS[which(DS_unique$category == 1 & DS_unique$colour == 14 & DS_unique$price == 48),]
DS[which(DS_unique$category == 3 & DS_unique$colour == 14 & DS_unique$price == 48),]
DS[which(DS_unique$category == 4 & DS_unique$colour == 14 & DS_unique$price == 48),]
DS[which(DS_unique$category == 3 & DS_unique$colour == 13 & DS_unique$price == 18),]
DS[which(DS_unique$category == 3 & DS_unique$colour == 13 & DS_unique$price == 18),]]
which(DS_unique$category == 3 & DS_unique$colour == 13 & DS_unique$price == 18)
View(DS_unique)
View(DS_unique)
DS[which(DS$category == 3 & DS$colour == 13 & DS$price == 18),]
DS[which(DS$category == 4 & DS$colour == 13 & DS$price == 18),]
DS[which(DS$category == 3 & DS$colour == 12 & DS$price == 18),]
DS[which(DS$category == 3 & DS$colour == 13 & DS$price == 18),]
count(DS[which(DS$category == 3 & DS$colour == 13 & DS$price == 18),])
nrow(DS_unique)
DS_unique[2,]
category, colour, price <- DS_unique$category, DS_unique$colour, DS_unique$price
category<- DS_unique$category
category<- [2, DS_unique$category]
category<- DS_unique[2, DS_unique$category]
category<- DS_unique$category[2]
colour<- DS_unique$colour[2]
price<- DS_unique$price[2]
DS_unique$count <- ""
count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),])
DS_unique$count[2] <- count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),])
nrow(DS_unique)
for (row in nrow(DS_unique)) {
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
DS_unique$count[row] <- count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),])
}
for (row in nrow(DS_unique)) {
print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
DS_unique$count[row] <- count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),])
}
for (row in nrow(DS_unique)) {
print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
DS_unique$count[row] <- count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),])
}
for (row in range(nrow(DS_unique))) {
print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
DS_unique$count[row] <- count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),])
}
for (row in range(nrow(DS_unique))) {
print(row)
}
for (row in 0:nrow(DS_unique)) {
print(row)
}
for (row in 0:nrow(DS_unique)) {
print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
DS_unique$count[row] <- count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),])
}
DS_unique
DS_compl <- DS_unique
View(DS_compl)
class(DS_unique)
lapply(DS_unique, class)
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
DS_unique$count[row] <- list(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
}
View(DS_unique)
View(DS_unique[[4]][[4]])
View(DS_unique[[4]][[1]])
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
DS_unique$count[row] <- [[list(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))]]
}
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
prov <- list(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
DS_unique$count[row] <- [prov]
}
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
prov <- list(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
DS_unique$count[row] <- [[prov]]
}
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
prov <- char(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
DS_unique$count[row] <- prov
}
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
prov <- int(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
DS_unique$count[row] <- prov
}
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
prov <- as.integer(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
DS_unique$count[row] <- prov
}
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
prov <- as.integer(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
DS_unique$count[row] <- prov
}
DS_compl <- DS_unique
View(DS_compl)
lapply(DS_unique, class)
library(tidyverse)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
DS <- read.delim("../Data/dataset.csv",sep = ";")
DS <- DS %>% select(c(5, 7, 9, 12))
colnames(DS)[2] = "category"
DS_dupl <- DS %>% select(-country)
DS_unique <- unique(DS_dupl)
class(DS_unique)
lapply(DS_unique, class)
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
prov <- as.integer(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
DS_unique$count[row] <- prov
}
DS_unique$count <- 0
class(DS_unique)
lapply(DS_unique, class)
for (row in 0:nrow(DS_unique)) {
# print(row)
category<- DS_unique$category[row]
colour<- DS_unique$colour[row]
price<- DS_unique$price[row]
prov <- as.integer(count(DS[which(DS$category == category & DS$colour == colour & DS$price == price),]))
DS_unique$count[row] <- prov
}
DS_compl <- DS_unique
View(DS)
final_DS <- DS_unique
View(final_DS)
final_DS <- DS_unique
write.csv(final_DS, "../Data/rearranged_DS.csv")
DS_rearranged <- read.delim("../Data/rearranged_DS.csv",sep = ";")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
DS_rearranged <- read.delim("../Data/rearranged_DS.csv",sep = ";")
View(DS_rearranged)
DS_rearranged <- read.delim("../Data/rearranged_DS.csv", sep = ";")
DS_rearranged <- read.csv("../Data/rearranged_DS.csv")
View(DS_rearranged)
DS_rearranged <- DS_rearranged %>% select(-X)
View(DS_rearranged)
median(DS_cl$count)
median(DS_rearranged$count)
median(DS_rearranged$count)
DS_rearranged <- DS_rearranged %>% mutate(Label = ifelse(visits >= 826, 1, 0))
median(DS_rearranged$count)
DS_rearranged <- DS_rearranged %>% mutate(Label = ifelse(count >= 826, 1, 0))
DS_rearranged <-DS_rearranged %>% select(-count)
modelAll = glm(Label ~ ., family = "binomial", data = rearranged_DS)
modelAll = glm(Label ~ ., family = "binomial", data = DS_rearranged)
predict(modelAll, type = "response")
D = rearranged_DS %>%
mutate(probAll = predict(modelAll, type = "response")) %>%
mutate(predAll50 = ifelse(probAll >=0.5, 1, 0))
predict(modelAll, type = "response")
D = DS_rearranged %>%
mutate(probAll = predict(modelAll, type = "response")) %>%
mutate(predAll50 = ifelse(probAll >=0.5, 1, 0))
misClas_predAll50 = mean(D$predAll50 != D$Label)
falPos_predAll50 =
length(which(D$Label == 0 & D$predAll50 == 1))/
length(which(D$Label == 0))
falNeg_predAll50 =
length(which(D$Label == 1 & D$predAll50 == 0))/
length(which(D$Label == 1))
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
DS <- read.csv("../Data/clean_DS.csv")
DS_cl <- DS %>% select(-X)
median(DS_cl$visits)
DS_cl <- DS_cl %>% mutate(Label = ifelse(visits >= 4, 1, 0))
DS_cl <-DS_cl %>% select(-visits)
lapply(DS_cl, class)
summary(DS_cl)
str(DS_cl)
dim(DS_cl)
modelAll = glm(Label ~ ., family = "binomial", data = DS_cl)
predict(modelAll, type = "response")
D = DS_cl %>%
mutate(probAll = predict(modelAll, type = "response")) %>%
mutate(predAll50 = ifelse(probAll >=0.5, 1, 0))
misClas_predAll50 = mean(D$predAll50 != D$Label)
falPos_predAll50 =
length(which(D$Label == 0 & D$predAll50 == 1))/
length(which(D$Label == 0))
falNeg_predAll50 =
length(which(D$Label == 1 & D$predAll50 == 0))/
length(which(D$Label == 1))
