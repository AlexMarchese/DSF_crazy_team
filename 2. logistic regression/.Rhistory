print('Hey guys')
library(tidyverse)
library(caret)
library(nnet) # for multivariate logistic regression
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
DS_or <- read.csv("../Data/clean_DS.csv")
DS_or <- read.delim("../Data/dataset.csv",sep = ";")
View(DS_or)
median(DS_cl$order)
median(DS_or$order)
median(DS_or$order)
DS_or <- DS_or %>% mutate(Label = ifelse(order >= 6, 1, 0))
DS_or <-DS_or %>% select(-order)
lapply(DS_cl, class)
lapply(DS_or, class)
modelAll = glm(Label ~ ., family = "binomial", data = DS_or)
predict(modelAll, type = "response")
D = DS_or %>%
mutate(probAll = predict(modelAll, type = "response")) %>%
mutate(predAll50 = ifelse(probAll >=0.5, 1, 0))
misClas_predAll50 = mean(D$predAll50 != D$Label)
# packages needed
library(tidyverse)
library(caret)
library(nnet) # for multivariate logistic regression
# clean environment and set current wd -> helps to easier work with imported files
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# three types of dataset (the original and two variations to see what gives best results)
DS_or <- read.delim("../Data/dataset.csv",sep = ";") # original dataset
DS_aggr <- read.csv("../Data/clean_DS.csv") # aggregated dataset
DS_rearr <- read.csv("../Data/rearranged_DS.csv") # rearranged dataset
View(DS_aggr)
View(DS_or)
View(DS_rearr)
library(glue) # this is a python f string equivalent -> needed for nice output printing
install.packages(glue)
"glue"
install.packages("glue")
install.packages("glue")
library(glue) # this is a python f string equivalent -> needed for nice output printing
name <- "Eric"
age <- 42
glue('Hello, {name}. You are {age}.')
# function to do it quickly
misclass_calc <- function(dataset) {
modelAll = glm(Label ~ ., family = "binomial", data = dataset)
predict(modelAll, type = "response")
D = dataset %>%
mutate(probAll = predict(modelAll, type = "response")) %>%
mutate(predAll50 = ifelse(probAll >=0.5, 1, 0))
misClas = mean(D$predAll50 != D$Label)
falPos =
length(which(D$Label == 0 & D$predAll50 == 1))/
length(which(D$Label == 0))
falNeg =
length(which(D$Label == 1 & D$predAll50 == 0))/
length(which(D$Label == 1))
return(glue("Dataset: {dataset}, misclassification: {misClas}, FP: {falPos}, FN: {falNeg}"))
}
misclass_calc(DS_or)
# packages needed
library(tidyverse)
library(caret)
library(nnet) # for multivariate logistic regression
library(glue) # this is a python f string equivalent -> needed for nice output printing
# clean environment and set current wd -> helps to easier work with imported files
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# three types of dataset (the original and two variations to see what gives best results)
# 1. binary approach
DS_or <- read.delim("../Data/dataset.csv",sep = ";") # original dataset
med_1 <- median(DS_or$order)
DS_or <- DS_or %>% mutate(Label = ifelse(order >= med_1, 1, 0))
DS_or <-DS_or %>% select(-order)
DS_aggr <- read.csv("../Data/clean_DS.csv") # aggregated dataset
DS_aggr <- DS_aggr %>% select(-X)
med_2 <- median(DS_aggr$visits)
DS_aggr <- DS_aggr %>% mutate(Label = ifelse(visits >= med_2, 1, 0))
DS_aggr <-DS_aggr %>% select(-visits)
DS_rearr <- read.csv("../Data/rearranged_DS.csv") # rearranged dataset
DS_rearr <- DS_rearr %>% select(-X)
med_3 <- median(DS_rearr$count)
DS_rearr <- DS_rearr %>% mutate(Label = ifelse(count >= med_3, 1, 0))
DS_rearr <- DS_rearr %>% select(-count)
# for each dataset: fitting the model, predicting & calculating the misclassification
# function to do it quickly
misclass_calc <- function(dataset) {
modelAll = glm(Label ~ ., family = "binomial", data = dataset)
predict(modelAll, type = "response")
D = dataset %>%
mutate(probAll = predict(modelAll, type = "response")) %>%
mutate(predAll50 = ifelse(probAll >=0.5, 1, 0))
misClas = mean(D$predAll50 != D$Label)
falPos =
length(which(D$Label == 0 & D$predAll50 == 1))/
length(which(D$Label == 0))
falNeg =
length(which(D$Label == 1 & D$predAll50 == 0))/
length(which(D$Label == 1))
return(glue("Dataset: {dataset}, misclassification: {misClas}, FP: {falPos}, FN: {falNeg}"))
}
misclass_calc(DS_or)
misclass_calc(DS_or)
# function to do it quickly
misclass_calc <- function(type_DS, dataset) {
modelAll = glm(Label ~ ., family = "binomial", data = dataset)
predict(modelAll, type = "response")
D = dataset %>%
mutate(probAll = predict(modelAll, type = "response")) %>%
mutate(predAll50 = ifelse(probAll >=0.5, 1, 0))
misClas = mean(D$predAll50 != D$Label)
falPos =
length(which(D$Label == 0 & D$predAll50 == 1))/
length(which(D$Label == 0))
falNeg =
length(which(D$Label == 1 & D$predAll50 == 0))/
length(which(D$Label == 1))
return(glue("Dataset: {type_DS} dataset, misclassification: {misClas}, FP: {falPos}, FN: {falNeg}"))
}
misclass_calc("original", DS_or)
# function to do it quickly
misclass_calc <- function(type_DS, dataset) {
modelAll = glm(Label ~ ., family = "binomial", data = dataset)
predict(modelAll, type = "response")
D = dataset %>%
mutate(probAll = predict(modelAll, type = "response")) %>%
mutate(predAll50 = ifelse(probAll >=0.5, 1, 0))
misClas = mean(D$predAll50 != D$Label)
falPos =
length(which(D$Label == 0 & D$predAll50 == 1))/
length(which(D$Label == 0))
falNeg =
length(which(D$Label == 1 & D$predAll50 == 0))/
length(which(D$Label == 1))
return(glue("Dataset: {type_DS} dataset, misclassification: {round(misClas, digits=3)}, FP: {round(falPos, digits=3)}, FN: {round(falNeg, digits=3)}"))
}
misclass_calc("original", DS_or)
misclass_calc("aggregated ", DS_aggr)
misclass_calc("original", DS_rearr)
DS_aggr_dive_in <- DS_aggr # needed to see inisights later
View(DS_aggr_dive_in)
med_2 <- median(DS_aggr_dive_in$visits)
DS_aggr <- read.csv("../Data/clean_DS.csv") # aggregated dataset
DS_aggr <- DS_aggr %>% select(-X)
DS_aggr_dive_in <- DS_aggr # needed to see inisights later
med_2 <- median(DS_aggr$visits)
DS_aggr <- DS_aggr %>% mutate(Label = ifelse(visits >= med_2, 1, 0))
DS_aggr <-DS_aggr %>% select(-visits)
med_2_dive_in <- median(DS_aggr_dive_in$visits)
hist(DS_aggr_dive_in$visits)
hist(visits=DS_aggr_dive_in$visits)
hist(DS_aggr_dive_in$visits, xlab = visits)
med_2_dive_in <- median(DS_aggr_dive_in$visits)
hist(DS_aggr_dive_in$visits, xlab = "visits")
hist(DS_aggr_dive_in$visits, xlab = "visits", main = "visits per customer")
hist(DS_aggr_dive_in$visits, xlab = "visits per customer", main = "frequency of visits per customer")
DS_aggr_dive_in = DS_aggr_dive_in %>%
filter(visits <= 30)
View(DS_aggr_dive_in)
misclass_calc("aggregated without outliers ", DS_aggr_dive_in)
DS_aggr_dive_in = DS_aggr_dive_in %>%
filter(visits <= 30)
DS_aggr_dive_in <- DS_aggr_dive_in %>% mutate(Label = ifelse(visits >= med_2_dive_in, 1, 0)) # n.b. I am not changing the median value
DS_aggr_dive_in <-DS_aggr_dive_in %>% select(-visits)
View(DS_aggr_dive_in)
misclass_calc("aggregated without outliers ", DS_aggr_dive_in)
DS_aggr_dive_in = DS_aggr_dive_in %>%
filter(visits <= 18)
DS_aggr_dive_in = DS_aggr_dive_in %>%
filter(visits <= 18)
DS_aggr <- read.csv("../Data/clean_DS.csv") # aggregated dataset
DS_aggr <- DS_aggr %>% select(-X)
DS_aggr_dive_in <- DS_aggr # needed to see inisights later
med_2 <- median(DS_aggr$visits)
DS_aggr_dive_in = DS_aggr_dive_in %>%
filter(visits <= 18)
DS_aggr_dive_in <- DS_aggr_dive_in %>% mutate(Label = ifelse(visits >= med_2_dive_in, 1, 0)) # n.b. I am not changing the median value
DS_aggr_dive_in <-DS_aggr_dive_in %>% select(-visits)
misclass_calc("aggregated without outliers ", DS_aggr_dive_in)
DS_aggr <- read.csv("../Data/clean_DS.csv") # aggregated dataset
DS_aggr <- DS_aggr %>% select(-X)
DS_aggr_dive_in <- DS_aggr # needed to see inisights later
med_2 <- median(DS_aggr$visits)
DS_aggr_dive_in = DS_aggr_dive_in %>%
filter(visits <= 10)
DS_aggr_dive_in <- DS_aggr_dive_in %>% mutate(Label = ifelse(visits >= med_2_dive_in, 1, 0)) # n.b. I am not changing the median value
DS_aggr_dive_in <-DS_aggr_dive_in %>% select(-visits)
misclass_calc("aggregated without outliers ", DS_aggr_dive_in)
DS_aggr <- read.csv("../Data/clean_DS.csv") # aggregated dataset
DS_aggr <- DS_aggr %>% select(-X)
DS_aggr_dive_in <- DS_aggr # needed to see inisights later
med_2 <- median(DS_aggr$visits)
DS_aggr_dive_in = DS_aggr_dive_in %>%
filter(visits <= 15)
DS_aggr_dive_in <- DS_aggr_dive_in %>% mutate(Label = ifelse(visits >= med_2_dive_in, 1, 0)) # n.b. I am not changing the median value
DS_aggr_dive_in <-DS_aggr_dive_in %>% select(-visits)
misclass_calc("aggregated without outliers ", DS_aggr_dive_in)
str(DS_rearr)
DS_rearr$Label <- as.factor(DS_rearr$Label)
str(DS_rearr)
View(DS_rearr)
CV <- trainControl(method = "cv", number = 10)
model_caret <- train(Label ~ .,
data = DS_rearr,
trControl = CV,
method = "glm",
family = "binomial",
na.action = na.pass)
View(model_caret)
model_caret[["control"]]
names(model_caret)
model_caret$finalModel
model_caret$results
model_caret$results[["Accuracy"]]
D = D %>%
mutate(probCV = predict(model_caret$finalModel, type = "response")) %>%
mutate(predCV = ifelse(probCV >=0.5, 1, 0))
D = DS_rearr %>%
mutate(probCV = predict(model_caret$finalModel, type = "response")) %>%
mutate(predCV = ifelse(probCV >=0.5, 1, 0))
View(D)
misClasCV = mean(D$predCV != D$Loan_Status)
misClasCV = mean(D$predCV != D$Label)
misClasCV + model_caret$results[["Accuracy"]]
falPosCV =
length(which(D$Loan_Status == 0 & D$predCV == 1))/
length(which(D$Loan_Status == 0))
misClasCV = mean(D$predCV != D$Label)
falPosCV =
length(which(D$Label == 0 & D$predCV == 1))/
length(which(D$Label == 0))
falNegCV =
length(which(D$Label == 1 & D$predCV == 0))/
length(which(D$Label == 1))
str(DS_rearr)
str(DS_rearr_multiv)
DS_rearr <- read.csv("../Data/rearranged_DS.csv") # rearranged dataset
DS_rearr <- DS_rearr %>% select(-X)
DS_rearr_multiv <- DS_rearr
str(DS_rearr_multiv)
View(DS_rearr_multiv)
unique(DS_rearr_multiv$count)
len(unique(DS_rearr_multiv$count))
lengths(unique(DS_rearr_multiv$count))
length(unique(DS_rearr_multiv$count))
DS_rearr_multiv$count <- as.factor(DS_rearr_multiv$count)
str(DS_rearr_multiv)
model <- multinom(Label ~., data = training)
str(DS_rearr_multiv)
length(unique(DS_rearr_multiv$count))
DS_rearr_multiv$count <- as.factor(DS_rearr_multiv$count)
set.seed(20)
ind <- sample(2, nrow(DS_rearr_multiv), replace = T, prob = c(0.7, 0.4))
training <- DS_rearr_multiv[ind==1,]
testing <- DS_rearr_multiv[ind==2,]
model <- multinom(Label ~., data = training)
View(DS_rearr_multiv)
model <- multinom(count ~., data = training)
prediction <- model %>% predict(testing)
View(testing)
model <- multinom(count ~., data = training)
prediction <- model %>% predict(testing)
mean(prediction == testing$count)
head(prediction)
library(tidyverse)
library(caret)
library(nnet) # for multinomial logistic regression
library(glue) # this is a python f string equivalent -> needed for nice output printing
# clean environment and set current wd -> helps to easier work with imported files
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# three types of dataset (the original and two variations to see what gives best results)
# 1. binary approach
DS_or <- read.delim("../Data/dataset.csv",sep = ";")
DS_or <-DS_or %>% select(-order)
DS_aggr <- read.csv("../Data/clean_DS.csv") # aggregated dataset
DS_aggr <- DS_aggr %>% select(-X)
DS_aggr_dive_in <- DS_aggr # needed to see insights later
med_2 <- median(DS_aggr$visits)
DS_aggr <- DS_aggr %>% mutate(Label = ifelse(visits >= med_2, 1, 0))
DS_aggr <-DS_aggr %>% select(-visits)
View(DS_aggr)
